<?xml version="1.0" encoding="utf-8"?>
<BugCollection sequence='0' release='' analysisTimestamp='1635447692573' version='4.4.2' timestamp='1635447677701'><Project projectName='demo'><Jar>/Users/abirismyname/workspace/example.java.helloworld/demo/target/classes</Jar><SrcDir>/Users/abirismyname/workspace/example.java.helloworld/demo/src/main/java</SrcDir><WrkDir>/Users/abirismyname/workspace/example.java.helloworld/demo/target</WrkDir></Project><BugInstance instanceOccurrenceNum='0' instanceHash='ecb799c4c4f188adc5d005f2423f75d2' cweid='570' rank='9' abbrev='BC' category='CORRECTNESS' priority='1' type='BC_IMPOSSIBLE_CAST' instanceOccurrenceMax='0'><ShortMessage>Impossible cast</ShortMessage><LongMessage>Impossible cast from Double to Long in com.example.Main.bcImpossibleCastWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='bcImpossibleCastWRONG' primary='true'><SourceLine endBytecode='16' classname='com.example.Main' start='102' end='105' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.bcImpossibleCastWRONG()</Message></Method><Type role='TYPE_FOUND' descriptor='Ljava/lang/Double;'><SourceLine classname='java.lang.Double' start='155' end='1197' sourcepath='java/lang/Double.java' sourcefile='Double.java'><Message>At Double.java:[lines 155-1197]</Message></SourceLine><Message>Actual type Double</Message></Type><Type role='TYPE_EXPECTED' descriptor='Ljava/lang/Long;'><SourceLine classname='java.lang.Long' start='71' end='2010' sourcepath='java/lang/Long.java' sourcefile='Long.java'><Message>At Long.java:[lines 71-2010]</Message></SourceLine><Message>Expected Long</Message></Type><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='5' name='doubleValue' register='0'><Message>Value loaded from doubleValue</Message></LocalVariable><SourceLine endBytecode='6' classname='com.example.Main' start='103' end='103' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='6' primary='true'><Message>At Main.java:[line 103]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a39256fe5738c0ec43af3e3a610fc030' cweid='570' rank='5' abbrev='BC' category='CORRECTNESS' priority='1' type='BC_IMPOSSIBLE_DOWNCAST' instanceOccurrenceMax='0'><ShortMessage>Impossible downcast</ShortMessage><LongMessage>Impossible downcast from RuntimeException to SecurityException in com.example.Main.bcImpossibleDowncastWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='bcImpossibleDowncastWRONG' primary='true'><SourceLine endBytecode='19' classname='com.example.Main' start='114' end='117' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.bcImpossibleDowncastWRONG()</Message></Method><Type role='TYPE_FOUND' descriptor='Ljava/lang/RuntimeException;'><SourceLine classname='java.lang.RuntimeException' start='52' end='119' sourcepath='java/lang/RuntimeException.java' sourcefile='RuntimeException.java'><Message>At RuntimeException.java:[lines 52-119]</Message></SourceLine><Message>Actual type RuntimeException</Message></Type><Type role='TYPE_EXPECTED' descriptor='Ljava/lang/SecurityException;'><SourceLine classname='java.lang.SecurityException' start='42' end='83' sourcepath='java/lang/SecurityException.java' sourcefile='SecurityException.java'><Message>At SecurityException.java:[lines 42-83]</Message></SourceLine><Message>Expected SecurityException</Message></Type><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='10' name='exception' register='0'><Message>Value loaded from exception</Message></LocalVariable><SourceLine endBytecode='11' classname='com.example.Main' start='115' end='115' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='11' primary='true'><Message>At Main.java:[line 115]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='7a44697f09757870f63b33df8c880e06' cweid='570' rank='5' abbrev='BC' category='CORRECTNESS' priority='1' type='BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY' instanceOccurrenceMax='0'><ShortMessage>Impossible downcast of toArray() result</ShortMessage><LongMessage>Impossible downcast of toArray() result to String[] in com.example.Main.bcImpossibleDowncastOfArrayWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='bcImpossibleDowncastOfArrayWRONG' primary='true'><SourceLine endBytecode='27' classname='com.example.Main' start='136' end='141' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.bcImpossibleDowncastOfArrayWRONG()</Message></Method><Type role='TYPE_FOUND' descriptor='[Ljava/lang/Object;'><Message>Actual type Object[]</Message></Type><Type role='TYPE_EXPECTED' descriptor='[Ljava/lang/String;'><Message>Expected String[]</Message></Type><Method isStatic='false' role='METHOD_RETURN_VALUE_OF' classname='java.util.Collection' signature='()[Ljava/lang/Object;' name='toArray'><SourceLine classname='java.util.Collection' sourcepath='java/util/Collection.java' sourcefile='Collection.java'></SourceLine><Message>Return value of java.util.Collection.toArray() of type Object[]</Message></Method><SourceLine endBytecode='32' classname='com.example.Main' start='139' end='139' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='32' primary='true'><Message>At Main.java:[line 139]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='cfaf071ca281a5b74301c29e97c770db' cweid='570' rank='9' abbrev='BC' category='CORRECTNESS' priority='2' type='BC_IMPOSSIBLE_INSTANCEOF' instanceOccurrenceMax='0'><ShortMessage>instanceof will always return false</ShortMessage><LongMessage>instanceof will always return false in com.example.Main.bcImpossibleInstanceOfWRONG(), since a Double can't be a Long</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='bcImpossibleInstanceOfWRONG' primary='true'><SourceLine endBytecode='14' classname='com.example.Main' start='126' end='128' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.bcImpossibleInstanceOfWRONG()</Message></Method><Type role='TYPE_FOUND' descriptor='Ljava/lang/Double;'><SourceLine classname='java.lang.Double' start='155' end='1197' sourcepath='java/lang/Double.java' sourcefile='Double.java'><Message>At Double.java:[lines 155-1197]</Message></SourceLine><Message>Actual type Double</Message></Type><Type role='TYPE_EXPECTED' descriptor='Ljava/lang/Long;'><SourceLine classname='java.lang.Long' start='71' end='2010' sourcepath='java/lang/Long.java' sourcefile='Long.java'><Message>At Long.java:[lines 71-2010]</Message></SourceLine><Message>Expected Long</Message></Type><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='20' name='value' register='0'><Message>Value loaded from value</Message></LocalVariable><SourceLine endBytecode='21' classname='com.example.Main' start='127' end='127' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='21' primary='true'><Message>At Main.java:[line 127]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2451396f540b5dca88b04c41427755b7' cweid='571' rank='17' abbrev='BC' category='STYLE' priority='2' type='BC_VACUOUS_INSTANCEOF' instanceOccurrenceMax='0'><ShortMessage>instanceof will always return true</ShortMessage><LongMessage>instanceof will always return true for all non-null values in com.example.Main.bcImpossibleInstanceOfCORRECT(), since all Double are instances of Double</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='bcImpossibleInstanceOfCORRECT' primary='true'><SourceLine endBytecode='14' classname='com.example.Main' start='131' end='133' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.bcImpossibleInstanceOfCORRECT()</Message></Method><Type role='TYPE_FOUND' descriptor='Ljava/lang/Double;'><SourceLine classname='java.lang.Double' start='155' end='1197' sourcepath='java/lang/Double.java' sourcefile='Double.java'><Message>At Double.java:[lines 155-1197]</Message></SourceLine><Message>Actual type Double</Message></Type><Type role='TYPE_EXPECTED' descriptor='Ljava/lang/Double;'><SourceLine classname='java.lang.Double' start='155' end='1197' sourcepath='java/lang/Double.java' sourcefile='Double.java'><Message>At Double.java:[lines 155-1197]</Message></SourceLine><Message>Expected Double</Message></Type><SourceLine endBytecode='21' classname='com.example.Main' start='132' end='132' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='21' primary='true'><Message>At Main.java:[line 132]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='80718487c43fe5bb80fc937f1a1e0098' cweid='563' rank='17' abbrev='DLS' category='STYLE' priority='2' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to value in com.example.Main.qabQuestionableBooleanAssignmentWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='qabQuestionableBooleanAssignmentWRONG' primary='true'><SourceLine endBytecode='19' classname='com.example.Main' start='216' end='222' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.qabQuestionableBooleanAssignmentWRONG()</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='5' name='value' register='0'><Message>Local variable named value</Message></LocalVariable><SourceLine endBytecode='4' classname='com.example.Main' start='217' end='217' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='4' primary='true'><Message>At Main.java:[line 217]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.BASE_VALUE' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='value'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.NO_LOADS' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='25a35365cf01e75707e084cfa5c72e06' cweid='440' rank='7' abbrev='DMI' category='CORRECTNESS' priority='2' type='DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE' instanceOccurrenceMax='0'><ShortMessage>BigDecimal constructed from double that isn't represented precisely</ShortMessage><LongMessage>BigDecimal constructed from 3.1 in com.example.Main.dmiBigDecimalConstructedFromDoubleWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='dmiBigDecimalConstructedFromDoubleWRONG' primary='true'><SourceLine endBytecode='89' classname='com.example.Main' start='152' end='154' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.dmiBigDecimalConstructedFromDoubleWRONG()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.math.BigDecimal' signature='(D)V' name='&lt;init&gt;'><SourceLine endBytecode='64' classname='java.math.BigDecimal' start='960' end='961' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Called method new java.math.BigDecimal(double)</Message></Method><Method isStatic='true' role='METHOD_ALTERNATIVE_TARGET' classname='java.math.BigDecimal' signature='(D)Ljava/math/BigDecimal;' name='valueOf'><SourceLine endBytecode='53' classname='java.math.BigDecimal' start='1354' end='1354' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Did you intend to invoke java.math.BigDecimal.valueOf(double)</Message></Method><String value='3.1'><Message>Value 3.1</Message></String><String value='3.100000000000000088817841970012523233890533447265625'><Message>Value 3.100000000000000088817841970012523233890533447265625</Message></String><SourceLine endBytecode='7' classname='com.example.Main' start='152' end='152' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='7' primary='true'><Message>At Main.java:[line 152]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='43bb70c5971ca1e5f97c7565320ce009' cweid='597' rank='9' abbrev='ES' category='BAD_PRACTICE' priority='1' type='ES_COMPARING_STRINGS_WITH_EQ' instanceOccurrenceMax='0'><ShortMessage>Comparison of String objects using == or !=</ShortMessage><LongMessage>Comparison of String objects using == or != in com.example.Main.esComparingStringsWithEqWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='esComparingStringsWithEqWRONG' primary='true'><SourceLine endBytecode='31' classname='com.example.Main' start='162' end='167' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.esComparingStringsWithEqWRONG()</Message></Method><Type role='TYPE_FOUND' descriptor='Ljava/lang/String;'><SourceLine classname='java.lang.String' start='140' end='4652' sourcepath='java/lang/String.java' sourcefile='String.java'><Message>At String.java:[lines 140-4652]</Message></SourceLine><Message>Actual type String</Message></Type><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='46' name='string2' register='3'><Message>Value loaded from string2</Message></LocalVariable><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='46' name='string1' register='2'><Message>Value loaded from string1</Message></LocalVariable><SourceLine endBytecode='47' classname='com.example.Main' start='166' end='166' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='47' primary='true'><Message>At Main.java:[line 166]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.RefComparisonWarningProperty.DYNAMIC_AND_UNKNOWN' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='6c53863ab629c408055098c773ed09ed' cweid='476' rank='5' abbrev='NP' category='CORRECTNESS' priority='1' type='NP_ALWAYS_NULL' instanceOccurrenceMax='0'><ShortMessage>Null pointer dereference</ShortMessage><LongMessage>Null pointer dereference of value in com.example.Main.npAlwaysNullWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='npAlwaysNullWRONG' primary='true'><SourceLine endBytecode='169' classname='com.example.Main' start='198' end='204' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.npAlwaysNullWRONG()</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='12' name='value' register='0'><Message>Value loaded from value</Message></LocalVariable><SourceLine role='SOURCE_LINE_DEREF' endBytecode='13' classname='com.example.Main' start='199' end='199' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='13' primary='true'><Message>Dereferenced at Main.java:[line 199]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='203ec6824f96ae69fee26a579e94ca35' cweid='476' rank='16' abbrev='NP' category='STYLE' priority='2' type='NP_LOAD_OF_KNOWN_NULL_VALUE' instanceOccurrenceMax='0'><ShortMessage>Load of known null value</ShortMessage><LongMessage>Load of known null value in com.example.Main.npAlwaysNullWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='npAlwaysNullWRONG' primary='true'><SourceLine endBytecode='37' classname='com.example.Main' start='198' end='204' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.npAlwaysNullWRONG()</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='2' name='value' register='0'><Message>Value loaded from value</Message></LocalVariable><SourceLine endBytecode='12' classname='com.example.Main' start='199' end='199' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='12' primary='true'><Message>At Main.java:[line 199]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='84e163cd6b7fbe33988aa84cdee4f8f6' cweid='481' rank='5' abbrev='QBA' category='CORRECTNESS' priority='1' type='QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT' instanceOccurrenceMax='0'><ShortMessage>Method assigns boolean literal in boolean expression</ShortMessage><LongMessage>com.example.Main.qabQuestionableBooleanAssignmentWRONG() assigns boolean literal in boolean expression</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='qabQuestionableBooleanAssignmentWRONG' primary='true'><SourceLine endBytecode='112' classname='com.example.Main' start='216' end='222' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.qabQuestionableBooleanAssignmentWRONG()</Message></Method><SourceLine endBytecode='5' classname='com.example.Main' start='217' end='217' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='5' primary='true'><Message>At Main.java:[line 217]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='aecc461293e4a9de919da0629b8d9bab' cweid='476' rank='18' abbrev='RCN' category='STYLE' priority='2' type='RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE' instanceOccurrenceMax='0'><ShortMessage>Redundant nullcheck of value known to be null</ShortMessage><LongMessage>Redundant nullcheck of value which is known to be null in com.example.Main.npAlwaysNullCORRECT()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='npAlwaysNullCORRECT' primary='true'><SourceLine endBytecode='138' classname='com.example.Main' start='207' end='213' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.npAlwaysNullCORRECT()</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='3' name='value' register='0'><Message>Value loaded from value</Message></LocalVariable><SourceLine role='SOURCE_REDUNDANT_NULL_CHECK' endBytecode='4' classname='com.example.Main' start='208' end='208' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='4' primary='true'><Message>Redundant null check at Main.java:[line 208]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='268c952e67984a4792a223ec7507605' cweid='476' rank='18' abbrev='RCN' category='STYLE' priority='2' type='RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE' instanceOccurrenceMax='0'><ShortMessage>Redundant nullcheck of value known to be null</ShortMessage><LongMessage>Redundant nullcheck of value which is known to be null in com.example.Main.npAlwaysNullWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='npAlwaysNullWRONG' primary='true'><SourceLine endBytecode='169' classname='com.example.Main' start='198' end='204' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.npAlwaysNullWRONG()</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='3' name='value' register='0'><Message>Value loaded from value</Message></LocalVariable><SourceLine role='SOURCE_REDUNDANT_NULL_CHECK' endBytecode='4' classname='com.example.Main' start='199' end='199' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='4' primary='true'><Message>Redundant null check at Main.java:[line 199]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='10ae439be4a914e202b8a82f232b2d38' cweid='440' rank='3' abbrev='RV' category='CORRECTNESS' priority='1' type='RV_RETURN_VALUE_IGNORED' instanceOccurrenceMax='0'><ShortMessage>Method ignores return value</ShortMessage><LongMessage>Return value of java.math.BigDecimal.add(BigDecimal) ignored in com.example.Main.rvReturnValueIgnoredWRONG()</LongMessage><Class classname='com.example.Main' primary='true'><SourceLine classname='com.example.Main' start='10' end='231' sourcepath='com/example/Main.java' sourcefile='Main.java'><Message>At Main.java:[lines 10-231]</Message></SourceLine><Message>In class com.example.Main</Message></Class><Method isStatic='true' classname='com.example.Main' signature='()V' name='rvReturnValueIgnoredWRONG' primary='true'><SourceLine endBytecode='98' classname='com.example.Main' start='186' end='189' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='0'></SourceLine><Message>In method com.example.Main.rvReturnValueIgnoredWRONG()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.math.BigDecimal' signature='(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;' name='add'><SourceLine endBytecode='199' classname='java.math.BigDecimal' start='1367' end='1377' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Called method java.math.BigDecimal.add(BigDecimal)</Message></Method><SourceLine endBytecode='8' classname='com.example.Main' start='187' end='187' sourcepath='com/example/Main.java' sourcefile='Main.java' startBytecode='8' primary='true'><Message>At Main.java:[line 187]</Message></SourceLine></BugInstance><BugCategory category='BAD_PRACTICE'><Description>Bad practice</Description></BugCategory><BugCategory category='CORRECTNESS'><Description>Correctness</Description></BugCategory><BugCategory category='STYLE'><Description>Dodgy code</Description></BugCategory><BugPattern cweid='481' abbrev='QBA' category='CORRECTNESS' type='QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT'><ShortDescription>Method assigns boolean literal in boolean expression</ShortDescription><Details>
      
      &lt;p&gt;
      This method assigns a literal boolean value (true or false) to a boolean variable inside
      an if or while expression. Most probably this was supposed to be a boolean comparison using
      ==, not an assignment using =.
      &lt;/p&gt;
      
    </Details></BugPattern><BugPattern abbrev='DLS' category='STYLE' type='DLS_DEAD_LOCAL_STORE'><ShortDescription>Dead store to local variable</ShortDescription><Details>

&lt;p&gt;
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used.
&lt;/p&gt;
&lt;p&gt;
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because SpotBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='570' abbrev='BC' category='CORRECTNESS' type='BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY'><ShortDescription>Impossible downcast of toArray() result</ShortDescription><Details>

&lt;p&gt;
This code is casting the result of calling &lt;code&gt;toArray()&lt;/code&gt; on a collection
to a type more specific than &lt;code&gt;Object[]&lt;/code&gt;, as in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String[] getAsArray(Collection&amp;lt;String&amp;gt; c) {
    return (String[]) c.toArray();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will usually fail by throwing a ClassCastException. The &lt;code&gt;toArray()&lt;/code&gt;
of almost all collections return an &lt;code&gt;Object[]&lt;/code&gt;. They can't really do anything else,
since the Collection object has no reference to the declared generic type of the collection.
&lt;p&gt;The correct way to do get an array of a specific type from a collection is to use
  &lt;code&gt;c.toArray(new String[]);&lt;/code&gt;
  or &lt;code&gt;c.toArray(new String[c.size()]);&lt;/code&gt; (the latter is slightly more efficient).
&lt;p&gt;There is one common/known exception to this. The &lt;code&gt;toArray()&lt;/code&gt;
method of lists returned by &lt;code&gt;Arrays.asList(...)&lt;/code&gt; will return a covariantly
typed array. For example, &lt;code&gt;Arrays.asArray(new String[] { "a" }).toArray()&lt;/code&gt;
will return a &lt;code&gt;String []&lt;/code&gt;. SpotBugs attempts to detect and suppress
such cases, but may miss some.
&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='570' abbrev='BC' category='CORRECTNESS' type='BC_IMPOSSIBLE_DOWNCAST'><ShortDescription>Impossible downcast</ShortDescription><Details>

&lt;p&gt;
This cast will always throw a ClassCastException.
The analysis believes it knows
the precise type of the value being cast, and the attempt to
downcast it to a subtype will always fail by throwing a ClassCastException.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='NP' category='STYLE' type='NP_LOAD_OF_KNOWN_NULL_VALUE'><ShortDescription>Load of known null value</ShortDescription><Details>

  &lt;p&gt; The variable referenced at this point is known to be null due to an earlier
   check against null. Although this is valid, it might be a mistake (perhaps you
intended to refer to a different variable, or perhaps the earlier check to see if the
variable is null should have been a check to see if it was non-null).
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='RCN' category='STYLE' type='RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE'><ShortDescription>Redundant nullcheck of value known to be null</ShortDescription><Details>

&lt;p&gt; This method contains a redundant check of a known null value against
the constant null.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='DMI' category='CORRECTNESS' type='DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE'><ShortDescription>BigDecimal constructed from double that isn't represented precisely</ShortDescription><Details>
      
    &lt;p&gt;
This code creates a BigDecimal from a double value that doesn't translate well to a
decimal number.
For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.
You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation
of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).
&lt;/p&gt;


    </Details></BugPattern><BugPattern abbrev='ES' category='BAD_PRACTICE' type='ES_COMPARING_STRINGS_WITH_EQ'><ShortDescription>Comparison of String objects using == or !=</ShortDescription><Details>

  &lt;p&gt;This code compares &lt;code&gt;java.lang.String&lt;/code&gt; objects for reference
equality using the == or != operators.
Unless both strings are either constants in a source file, or have been
interned using the &lt;code&gt;String.intern()&lt;/code&gt; method, the same string
value may be represented by two different String objects. Consider
using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='NP' category='CORRECTNESS' type='NP_ALWAYS_NULL'><ShortDescription>Null pointer dereference</ShortDescription><Details>

&lt;p&gt; A null pointer is dereferenced here.&amp;nbsp; This will lead to a
&lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='RV' category='CORRECTNESS' type='RV_RETURN_VALUE_IGNORED'><ShortDescription>Method ignores return value</ShortDescription><Details>

   &lt;p&gt; The return value of this method should be checked. One common
cause of this warning is to invoke a method on an immutable object,
thinking that it updates the object. For example, in the following code
fragment,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String dateString = getHeaderField(name);
dateString.trim();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the programmer seems to be thinking that the trim() method will update
the String referenced by dateString. But since Strings are immutable, the trim()
function returns a new String value, which is being ignored here. The code
should be corrected to: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String dateString = getHeaderField(name);
dateString = dateString.trim();
&lt;/code&gt;&lt;/pre&gt;

    </Details></BugPattern><BugPattern cweid='570' abbrev='BC' category='CORRECTNESS' type='BC_IMPOSSIBLE_INSTANCEOF'><ShortDescription>instanceof will always return false</ShortDescription><Details>

&lt;p&gt;
This instanceof test will always return false. Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='570' abbrev='BC' category='CORRECTNESS' type='BC_IMPOSSIBLE_CAST'><ShortDescription>Impossible cast</ShortDescription><Details>

&lt;p&gt;
This cast will always throw a ClassCastException.
SpotBugs tracks type information from instanceof checks,
and also uses more precise information about the types
of values returned from methods and loaded from fields.
Thus, it may have more precise information that just
the declared type of a variable, and can use this to determine
that a cast will always throw an exception at runtime.

&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='571' abbrev='BC' category='STYLE' type='BC_VACUOUS_INSTANCEOF'><ShortDescription>instanceof will always return true</ShortDescription><Details>

&lt;p&gt;
This instanceof test will always return true (unless the value being tested is null).
Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
If you really want to test the value for being null, perhaps it would be clearer to do
better to do a null test rather than an instanceof test.
&lt;/p&gt;

    </Details></BugPattern><BugCode abbrev='BC'><Description>Bad casts of object references</Description></BugCode><BugCode cweid='440' abbrev='DMI'><Description>Dubious method invocation</Description></BugCode><BugCode abbrev='QBA'><Description>Questionable Boolean Assignment</Description></BugCode><BugCode cweid='476' abbrev='NP'><Description>Null pointer dereference</Description></BugCode><BugCode cweid='440' abbrev='RV'><Description>Bad use of return value from method</Description></BugCode><BugCode cweid='563' abbrev='DLS'><Description>Dead local store</Description></BugCode><BugCode cweid='476' abbrev='RCN'><Description>Redundant comparison to null</Description></BugCode><BugCode cweid='597' abbrev='ES'><Description>Checking String equality using == or !=</Description></BugCode><Errors missingClasses='0' errors='0'></Errors><FindBugsSummary num_packages='1' total_classes='1' priority_1='7' priority_2='7' total_size='156' clock_seconds='1.34' referenced_classes='25' vm_version='17+0' total_bugs='14' java_version='17' gc_seconds='0.00' alloc_mbytes='512.00' cpu_seconds='8.30' peak_mbytes='272.63' timestamp='Thu, 28 Oct 2021 15:01:17 -0400'><FileStats path='com/example/Main.java' size='156' bugHash='c6f205fb48c7306350297c117c18dc4d' bugCount='14'></FileStats><PackageStats package='com.example' priority_1='7' total_bugs='14' priority_2='7' total_size='156' total_types='1'><ClassStats bugs='14' size='156' priority_1='7' priority_2='7' interface='false' sourceFile='Main.java' class='com.example.Main'></ClassStats></PackageStats><FindBugsProfile><ClassProfile avgMicrosecondsPerInvocation='615' totalMilliseconds='270' name='edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine' maxMicrosecondsPerInvocation='10192' standardDeviationMicrosecondsPerInvocation='1214' invocations='439'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2337' totalMilliseconds='58' name='edu.umd.cs.findbugs.detect.FieldItemSummary' maxMicrosecondsPerInvocation='12644' standardDeviationMicrosecondsPerInvocation='3500' invocations='25'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='109' totalMilliseconds='48' name='edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine' maxMicrosecondsPerInvocation='3021' standardDeviationMicrosecondsPerInvocation='172' invocations='442'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='352' totalMilliseconds='45' name='edu.umd.cs.findbugs.OpcodeStack$JumpInfoFactory' maxMicrosecondsPerInvocation='2910' standardDeviationMicrosecondsPerInvocation='450' invocations='128'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1700' totalMilliseconds='37' name='edu.umd.cs.findbugs.ba.npe.NullDerefAndRedundantComparisonFinder' maxMicrosecondsPerInvocation='18600' standardDeviationMicrosecondsPerInvocation='3812' invocations='22'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1510' totalMilliseconds='33' name='edu.umd.cs.findbugs.classfile.engine.bcel.MethodGenFactory' maxMicrosecondsPerInvocation='29119' standardDeviationMicrosecondsPerInvocation='6031' invocations='22'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1141' totalMilliseconds='28' name='edu.umd.cs.findbugs.detect.FindNoSideEffectMethods' maxMicrosecondsPerInvocation='7011' standardDeviationMicrosecondsPerInvocation='1526' invocations='25'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='69' totalMilliseconds='28' name='edu.umd.cs.findbugs.util.TopologicalSort' maxMicrosecondsPerInvocation='893' standardDeviationMicrosecondsPerInvocation='123' invocations='405'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='934' totalMilliseconds='28' name='edu.umd.cs.findbugs.classfile.engine.bcel.ValueNumberDataflowFactory' maxMicrosecondsPerInvocation='8176' standardDeviationMicrosecondsPerInvocation='1826' invocations='30'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1193' totalMilliseconds='26' name='edu.umd.cs.findbugs.classfile.engine.bcel.IsNullValueDataflowFactory' maxMicrosecondsPerInvocation='12035' standardDeviationMicrosecondsPerInvocation='2389' invocations='22'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1150' totalMilliseconds='25' name='edu.umd.cs.findbugs.classfile.engine.bcel.TypeDataflowFactory' maxMicrosecondsPerInvocation='7026' standardDeviationMicrosecondsPerInvocation='1753' invocations='22'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='503' totalMilliseconds='24' name='edu.umd.cs.findbugs.classfile.engine.bcel.JavaClassAnalysisEngine' maxMicrosecondsPerInvocation='9262' standardDeviationMicrosecondsPerInvocation='1367' invocations='49'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='955' totalMilliseconds='23' name='edu.umd.cs.findbugs.detect.NoteDirectlyRelevantTypeQualifiers' maxMicrosecondsPerInvocation='5699' standardDeviationMicrosecondsPerInvocation='1480' invocations='25'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1078' totalMilliseconds='23' name='edu.umd.cs.findbugs.classfile.engine.bcel.CFGFactory' maxMicrosecondsPerInvocation='8691' standardDeviationMicrosecondsPerInvocation='1978' invocations='22'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='875' totalMilliseconds='21' name='edu.umd.cs.findbugs.detect.FunctionsThatMightBeMistakenForProcedures' maxMicrosecondsPerInvocation='8028' standardDeviationMicrosecondsPerInvocation='1760' invocations='25'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='877' totalMilliseconds='19' name='edu.umd.cs.findbugs.classfile.engine.bcel.UnconditionalValueDerefDataflowFactory' maxMicrosecondsPerInvocation='10353' standardDeviationMicrosecondsPerInvocation='2076' invocations='22'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='17175' totalMilliseconds='17' name='edu.umd.cs.findbugs.detect.FindOpenStream' maxMicrosecondsPerInvocation='17175' standardDeviationMicrosecondsPerInvocation='0' invocations='1'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='562' totalMilliseconds='14' name='edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical' maxMicrosecondsPerInvocation='6311' standardDeviationMicrosecondsPerInvocation='1253' invocations='25'></ClassProfile></FindBugsProfile></FindBugsSummary><ClassFeatures></ClassFeatures><History></History></BugCollection>